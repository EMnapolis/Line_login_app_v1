import os
import sqlite3
import pandas as pd
import streamlit as st
import tiktoken
import altair as alt
from utility_chat import *
from utility_ai import *

DB_PATH = "data/sqdata.db"

# ‚öôÔ∏è Debug Mode
DEBUG = os.getenv("DEBUG", "0") == "1"
if DEBUG:
    if "user_id" not in st.session_state:
        st.session_state["user_id"] = "Udebug123456"
        st.session_state["displayName"] = "U TEST"
        st.session_state["pictureUrl"] = "https://i.imgur.com/1Q9Z1Zm.png"
        st.session_state["status"] = "APPROVED"
        st.session_state["role"] = "super admin"
        st.info("üîß Loaded mock user session for debugging.")

# üîí Permission check
if "role" not in st.session_state or st.session_state["role"] != "super admin":
    st.error("‚õîÔ∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ super admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
    st.stop()

# üì• Fetch table data
def fetch_table(table_name):
    if not os.path.exists(DB_PATH):
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {DB_PATH}")
        return pd.DataFrame()
    try:
        conn = sqlite3.connect(DB_PATH)
        df = pd.read_sql_query(f"SELECT * FROM {table_name}", conn)
        conn.close()

        if table_name == "messages" and "content" in df.columns:
            df["token_count"] = df["content"].apply(lambda x: count_tokens(x))

        if "created_at" in df.columns:
            df["created_at"] = pd.to_datetime(
                df["created_at"], errors="coerce"
            ).dt.strftime("%Y-%m-%d %H:%M:%S")

        if "token_count" in df.columns:
            cols = [col for col in df.columns if col != "token_count"] + ["token_count"]
            df = df[cols]

        return df
    except sqlite3.OperationalError as e:
        st.error(f"‚ùå SQLite Error: {e}")
        return pd.DataFrame()


# üìä Token Usage Summary
def summarize_token_usage(user_id=None, default_quota=1_000_000):
    conn, cursor = init_db()

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token usage
    query = """
        SELECT user_id, model,
               SUM(prompt_tokens) AS prompt_tokens,
               SUM(completion_tokens) AS completion_tokens,
               SUM(total_tokens) AS total_tokens
        FROM token_usage
    """
    if user_id:
        query += " WHERE user_id = ?"
        cursor.execute(query + " GROUP BY user_id, model", (user_id,))
    else:
        cursor.execute(query + " GROUP BY user_id, model")

    results = cursor.fetchall()
    if not results:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token usage")
        return

    df = pd.DataFrame(
        results,
        columns=[
            "user_id",
            "model",
            "prompt_tokens",
            "completion_tokens",
            "total_tokens",
        ],
    )

    # ‚úÖ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î token ‡∏ï‡πà‡∏≠ user
    usage_df = df.groupby("user_id", as_index=False)["total_tokens"].sum()
    usage_df = usage_df.rename(columns={"total_tokens": "‡∏£‡∏ß‡∏° Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"})

    # ‚úÖ ‡∏î‡∏∂‡∏á quota override ‡∏à‡∏≤‡∏Å record ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ user ‡∏ó‡∏µ‡πà‡∏°‡∏µ quota_override
    cursor.execute(
        """
        SELECT user_id, quota_override
        FROM token_usage
        WHERE quota_override IS NOT NULL
        AND id IN (
            SELECT MAX(id) FROM token_usage
            WHERE quota_override IS NOT NULL
            GROUP BY user_id
        )
        """
    )
    quota_rows = cursor.fetchall()
    quota_dict = {uid: quota for uid, quota in quota_rows}

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå quota ‡πÅ‡∏•‡∏∞ token ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    usage_df["‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ Token"] = usage_df["user_id"].apply(
        lambda uid: quota_dict.get(uid, default_quota)
    )
    usage_df["Token ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = usage_df["‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ Token"] - usage_df["‡∏£‡∏ß‡∏° Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"]
    usage_df["% ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß"] = (
        usage_df["‡∏£‡∏ß‡∏° Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"] / usage_df["‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ Token"] * 100
    ).round(2)

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    st.dataframe(usage_df, use_container_width=True)

    with st.expander("üìä ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏ß‡∏° Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (TOP 10)", expanded=False):
        top10 = usage_df.sort_values(by="‡∏£‡∏ß‡∏° Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", ascending=False).head(10)
        st.bar_chart(top10.set_index("user_id")["‡∏£‡∏ß‡∏° Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"])

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ ‚Üí ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‚Üí ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    def get_quota(uid):
        return quota_dict.get(uid, default_quota)

    usage_df["‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤"] = usage_df["user_id"].apply(get_quota)
    usage_df["Token ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = usage_df.apply(
        lambda row: max(row["‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤"] - row["‡∏£‡∏ß‡∏° Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"], 0), axis=1
    )
    usage_df["% ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"] = (usage_df["‡∏£‡∏ß‡∏° Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"] / usage_df["‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤"] * 100).round(
        2
    )

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü
    st.markdown("### üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏ß‡∏° Token ‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    st.dataframe(usage_df, use_container_width=True)

    # üîΩ ‡∏Å‡∏£‡∏≤‡∏ü token usage ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•
    pivoted = (
        df.pivot(index="user_id", columns="model", values="total_tokens")
        .fillna(0)
        .reset_index()
    )
    melted = pivoted.melt(
        id_vars=["user_id"], var_name="model", value_name="total_tokens"
    )

    st.markdown("### üìä ‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Token ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    chart = (
        alt.Chart(melted)
        .mark_bar()
        .encode(
            x=alt.X("user_id:N", title="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"),
            y=alt.Y("total_tokens:Q", title="Token ‡∏£‡∏ß‡∏°"),
            color=alt.Color("model:N", title="‡πÇ‡∏°‡πÄ‡∏î‡∏•"),
            tooltip=["user_id", "model", "total_tokens"],
        )
    )
    st.altair_chart(chart, use_container_width=True)


# üóÇ Table list
TABLES = {
    "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (access_login)": "access_login",
    "‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (conversations)": "conversations",
    "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (messages)": "messages",
    "Prompts": "prompts",
    "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß (sent_records)": "sent_records",
    "JSON ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö (raw_jsons)": "raw_json",
}

# üß≠ Sidebar menu
menu = st.sidebar.radio(
    "‡πÄ‡∏°‡∏ô‡∏π", ["üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Token", "Backup/Restore db"]
)

# üìä Table viewer
if menu == "üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
    st.title("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    selected_label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á", list(TABLES.keys()))
    table_name = TABLES[selected_label]

    if (
        "last_table" not in st.session_state
        or st.session_state["last_table"] != table_name
    ):
        st.session_state["page"] = 1
        st.session_state["last_table"] = table_name

    df = fetch_table(table_name)

    if df.empty:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    else:
        ROWS_PER_PAGE = 20
        total_rows = len(df)
        total_pages = (total_rows - 1) // ROWS_PER_PAGE + 1

        st.markdown(f"### üßæ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á: `{table_name}`")
        st.session_state["page"] = st.number_input(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
            min_value=1,
            max_value=total_pages,
            value=st.session_state.get("page", 1),
            step=1,
            key="page_input",
        )

        start_idx = (st.session_state["page"] - 1) * ROWS_PER_PAGE
        end_idx = start_idx + ROWS_PER_PAGE
        paginated_df = df.iloc[start_idx:end_idx]

        st.caption(
            f"üî¢ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ {st.session_state['page']} ‡∏à‡∏≤‡∏Å {total_pages} | ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_rows} ‡πÅ‡∏ñ‡∏ß"
        )
        st.dataframe(paginated_df, use_container_width=True)

        st.download_button(
            "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV",
            df.to_csv(index=False).encode("utf-8-sig"),
            file_name=f"{table_name}.csv",
            mime="text/csv",
        )

# ‚úÖ Token adjustment UI
elif menu == "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Token":
    st.header("üõ† ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Token ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    conn, cursor = init_db()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # üîπ 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ Token
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    st.subheader("üåü ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ Token")

    cursor.execute("SELECT DISTINCT user_id FROM token_usage ORDER BY user_id")
    user_ids = [row[0] for row in cursor.fetchall()]

    if not user_ids:
        st.info("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö token_usage")
    else:
        selected_quota_user = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤",
            user_ids,
            key="quota_user_selectbox",
        )

        new_quota = st.number_input(
            "üîÑ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î quota ‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ)",
            min_value=0,
            value=1_000_000,
            step=100_000,
        )

        if st.button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å quota ‡πÉ‡∏´‡∏°‡πà"):
            try:
                now = pd.Timestamp.now().isoformat()
                cursor.execute(
                    """
                    INSERT INTO token_usage (
                        user_id, model, prompt_tokens, completion_tokens, total_tokens,
                        quota_override, created_at
                    ) VALUES (?, ?, ?, ?, ?, ?, ?)
                    """,
                    (
                        selected_quota_user,
                        "quota",  # üìå ‡πÉ‡∏ä‡πâ model='quota' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î quota override
                        0,
                        0,
                        0,
                        new_quota,
                        now,
                    ),
                )
                conn.commit()
                st.success(
                    f"üåü ‡∏õ‡∏£‡∏±‡∏ö quota ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô {new_quota:,} tokens ‡πÉ‡∏´‡πâ `{selected_quota_user}` ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                )
            except Exception as e:
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î: {e}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # üìÖ 2. ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô token ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    st.markdown("---")
    st.subheader("üìÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Token ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")

    # üîÅ refresh user_ids ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å quota ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
    user_ids = [r[0] for r in get_token_usage_summary(cursor)]
    if not user_ids:
        st.info("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token usage")
    else:
        selected_user = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", user_ids, key="user_token_daily")

        cursor.execute(
            """
            SELECT DATE(created_at) AS ‡∏ß‡∏±‡∏ô, SUM(total_tokens) AS tokens
            FROM token_usage
            WHERE user_id = ?
            GROUP BY DATE(created_at)
            ORDER BY DATE(created_at) DESC
            """,
            (selected_user,),
        )
        daily_data = cursor.fetchall()

        if daily_data:
            df_daily = pd.DataFrame(daily_data, columns=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏£‡∏ß‡∏° Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"])
            st.dataframe(df_daily, use_container_width=True)
            st.bar_chart(df_daily.set_index("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"))
        else:
            st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Token ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # üìä 3. Token Usage Summary
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    st.markdown("---")
    st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Token")

    usage_df = summarize_token_usage()
    if usage_df is not None:
        with st.expander("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏ß‡∏° Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (TOP 10)", expanded=False):
            top10 = usage_df.sort_values(by="‡∏£‡∏ß‡∏° Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", ascending=False).head(10)
            st.bar_chart(top10.set_index("user_id")["‡∏£‡∏ß‡∏° Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"])

# üíæ Backup / Restore
elif menu == "Backup/Restore db":
    st.title("üì¶ Backup / Restore Database")
    st.warning(
        """
        ### ‚ÑπÔ∏è ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Backup / Restore
        - ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        - ‡∏Å‡∏≤‡∏£ Restore ‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        """
    )
    backup1, backup2 = st.columns([1, 1])

    with backup1:
        st.subheader("üì• Backup Database")
        if os.path.exists(DB_PATH):
            with open(DB_PATH, "rb") as f:
                st.download_button(
                    label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î sqdata.db",
                    data=f,
                    file_name="sqdata.db",
                    mime="application/octet-stream",
                )
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: data/sqdata.db")

    with backup2:
        st.subheader("üì§ Restore Database")
        uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .db", type=["db"])
        if uploaded_file is not None:
            confirm = st.checkbox(
                "‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", value=False, key="confirm_restore"
            )
            if st.button("‚ôªÔ∏è Restore ‡∏ó‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", disabled=not confirm):
                try:
                    with open(DB_PATH, "wb") as f:
                        f.write(uploaded_file.read())
                    st.success("‚úÖ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                    st.info("üîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ refresh ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà")
                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e}")
