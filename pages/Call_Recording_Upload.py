# pages/Call_Recording_Upload.py
import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
import os
from call_upload_utils import (
    vl3cx_login, vl3cx_refresh_token,
    fetch_json, process_records, load_sent_rec_ids_db,
    download_recording, upload_file_to_asb,
    create_chat_room, json_helper, save_sent_rec_id_db, log_failed
)
from utility_chat import *

CHAT_TOKEN_VL = os.getenv("CHAT_TOKEN") or "Empty" #Set ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ chat_token_vl

DB_FILE = os.path.join("data", "sqdata.db")
def get_connection():
    return sqlite3.connect(DB_FILE)

# ----------------------------
# ‚öôÔ∏è Debug Mode Configuration
# ----------------------------
DEBUG = os.getenv("DEBUG", "0") == "1"

if DEBUG:
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ session ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ mock ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    if "user_id" not in st.session_state:
        st.session_state["user_id"] = "Udebug123456"
        st.session_state["displayName"] = "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö TEST"
        st.session_state["pictureUrl"] = "https://i.imgur.com/1Q9Z1Zm.png"
        st.session_state["status"] = "APPROVED"
        st.session_state["role"] = "super admin"
        st.info("üîß Loaded mock user session for debugging.")

# ========== Role ==========
role = st.session_state.get("role", "").lower()
# "super admin" , "admin" , "user"

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô session_state ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
# ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô KeyError ‡∏´‡∏£‡∏∑‡∏≠ AttributeError ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
for key in ["access_token", "refresh_token", "tmp_token"]:
    if key not in st.session_state:
        st.session_state[key] = ""

#‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ pages/Call_Recording_Upload.py
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö Call Recording Upload", page_icon="üéôÔ∏è", layout="wide")
st.page_link("app.py", label="‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", icon="üè†")
st.title("üéôÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö Call Recording Upload")

#---------------
# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à login ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
if "user_id" not in st.session_state or st.session_state.get("status") != "APPROVED":
    st.error("üö´ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥")
    st.stop()
#---------------

# Left Pane Menu
menu = st.sidebar.radio("‡πÄ‡∏°‡∏ô‡∏π", ["‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"])

if menu == "‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô":
    with st.expander("üîê ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Tmp Token ‡∏£‡∏∞‡∏ö‡∏ö Villa 3CX", expanded=False):
        vl3cx1, vl3cx2, vl3cx3, vl3cx4 = st.columns([3,2,3,2])
        with vl3cx1:
            if st.button("Villa3CXLogin"):
                access_token, refresh_token = vl3cx_login()
                if access_token and refresh_token:
                    st.session_state.access_token = access_token
                    st.session_state.refresh_token = refresh_token
                    st.session_state.login_status = "‚úÖ Login success!"
                else:
                    st.session_state.login_status = "‚ùå Login failed."
        with vl3cx2:
            if "login_status" in st.session_state:
                st.markdown(st.session_state.login_status)

        with vl3cx3:
            if st.button("Refresh Token"):
                if st.session_state.refresh_token:
                    new_token = vl3cx_refresh_token(st.session_state.refresh_token)
                    if new_token:
                        st.session_state.tmp_token = new_token
                        st.session_state.refresh_status = "‚úÖ Token refreshed!"
                    else:
                        st.session_state.refresh_status = "‚ùå Refresh failed."
                else:
                    st.session_state.refresh_status = "‚ö†Ô∏è Login first."
        with vl3cx4:
            if "refresh_status" in st.session_state:
                st.markdown(st.session_state.refresh_status)

        tmp_token = st.text_input("3CX Temporary Access Token (tmp_token)",
                                value=st.session_state.tmp_token, type="password",
                                help="‡∏Å‡∏£‡∏≠‡∏Å tmp_token ‡∏à‡∏≤‡∏Å 3CX Dashboard (‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ô '‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')")

    with st.expander("üîê ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Chat Token ‡πÅ‡∏•‡∏∞ Contact ID", expanded=False):
        chat_token = st.text_input("ChatCenter Access Token (chat_token)",
                                   value = CHAT_TOKEN_VL,type="password",
                                   help="‡∏Å‡∏£‡∏≠‡∏Å chat_token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å https://cc-stg.villa-marketjp.com")
        contact_id = st.number_input("Contact ID", value=3)
    chat_tk1, chat_tk2, chat_tk3 = st.columns([2,3,5]) # ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• 
    with chat_tk1:
        # --- üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà: Clear session state ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
        if st.button("üîÅ **‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà**", disabled=st.session_state.get("is_processing", False)):
            for key in ["ready_to_process", "processed", "df_new"
                    , "processed_df","full_df", "selected_ids"]:
                st.session_state.pop(key, None)
                
                
            st.rerun()
    with chat_tk2:
        mode = st.radio("**‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô**", ["‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"])
    with chat_tk3:
        st.markdown("""
        1Ô∏è‚É£ **‡∏Å‡∏£‡∏≠‡∏Å Token ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**  
        2Ô∏è‚É£ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° üì• **‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏à‡∏≤‡∏Å 3CX**  
        3Ô∏è‚É£ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° üöÄ **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà**
        """)

    if mode == "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà":

        # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        before_date = date.today() - timedelta(days=1)
        default_date = date.today()
        mode_col1, mode_col2,mode_col3 = st.columns(3)  # ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏π‡πà
        with mode_col1:
            from_date = st.date_input("From Date", value=before_date) # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        with mode_col2:
            to_date = st.date_input("To Date", value=default_date)  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        with mode_col3:
            st.markdown("""
                            <div style="display: flex; flex-direction: column; align-items: left; justify-content: left; height: 100%;">
                                <span style="font-size: 14px; margin-bottom: 5px;">‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á</span>
                            </div>
                            """, unsafe_allow_html=True)
            # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏±‡πà‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏à‡∏≤‡∏Å 3CX
            if st.button("üì• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏à‡∏≤‡∏Å 3CX", disabled=st.session_state.get("is_processing", False)):
                
                if not tmp_token or not chat_token:
                    st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ó‡∏±‡πâ‡∏á tmp_token ‡πÅ‡∏•‡∏∞ chat_token")
                else:
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏à‡∏≤‡∏Å 3CX..."):
                        json_data = fetch_json(tmp_token, from_date, to_date)
                        df = pd.json_normalize(json_data.get("value", []))

                    if df.empty:
                        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å 3CX API ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
                    else:
                        df["Id"] = df["Id"].astype(str)
                        sent_ids = load_sent_rec_ids_db()
                        df["already_sent"] = df["Id"].isin(sent_ids)

                        # üïë ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° preview
                        def build_message(row):
                            try:
                                rec_id = row["Id"]
                                start_time_utc = datetime.strptime(row["StartTime"], "%Y-%m-%dT%H:%M:%S.%fZ")
                                local_time = start_time_utc + timedelta(hours=7)
                                start_time_str = local_time.strftime("%Y-%m-%d %H:%M:%S")

                                from_num = row["FromCallerNumber"].replace("Ext.", "")
                                to_num = row["ToCallerNumber"]
                                from_display = row["FromDisplayName"]
                                to_display = row["ToDisplayName"]
                                call_type = row["CallType"]

                                if call_type == "InboundExternal":
                                    from_display_clean = from_display.split(":")[-1] if ":" in from_display else from_display
                                    return f"From_{from_num}_{from_display_clean}_To_{to_num}_{to_display}_‡πÄ‡∏°‡∏∑‡πà‡∏≠_{start_time_str}"
                                else:
                                    to_display_clean = "" if to_num == to_display else to_display
                                    msg = f"From_{from_num}_{from_display}_To_{to_num}"
                                    if to_display_clean:
                                        msg += f"_{to_display_clean}"
                                    return f"{msg}_‡πÄ‡∏°‡∏∑‡πà‡∏≠_{start_time_str}"
                            except:
                                return "‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"

                        df["preview_message"] = df.apply(build_message, axis=1)

                        st.session_state["full_df"] = df
                        st.session_state["selected_ids"] = []  # Reset selection
               
    if "full_df" in st.session_state:
        df = st.session_state["full_df"]

        # üîç ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏¢
        search1, search2, search3 = st.columns([1, 1, 1])
        with search1:   # üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å rec_id ‡∏´‡∏£‡∏∑‡∏≠ preview
            search_text = st.text_input("üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ rec_id ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≤‡∏¢", value="")
        with search2:   # üìû ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏¢
            call_type_filter = st.selectbox("üìû ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏¢", options=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "InboundExternal", "OutboundExternal"])
        with search3:   # üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏≥‡πÄ‡∏ô‡∏≤ DataFrame
            filtered_df = df.copy()

            # ‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            if search_text:
                search_lower = search_text.lower()
                filtered_df = filtered_df[
                    filtered_df["Id"].str.lower().str.contains(search_lower) |
                    filtered_df["preview_message"].str.lower().str.contains(search_lower)
                ]
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≤‡∏¢
            if call_type_filter != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                filtered_df = filtered_df[filtered_df["CallType"] == call_type_filter]

            # ‚úÖ FIX BUG: ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á
            total_rows = len(filtered_df)
            if total_rows == 0:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
                st.stop()

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
            ROWS_PER_PAGE = 50
            total_pages = (total_rows - 1) // ROWS_PER_PAGE + 1

            # üß≠ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤ (fix max_value)
            page = st.number_input(
                    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤",
                    min_value=1,
                    max_value=max(1, total_pages),
                    value=1,
                    step=1
                )
            start_idx = (page - 1) * ROWS_PER_PAGE
            end_idx = start_idx + ROWS_PER_PAGE
            paginated_df = filtered_df.iloc[start_idx:end_idx]

        # üßæ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π
        st.caption(f"üî¢ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ {page} ‡∏à‡∏≤‡∏Å {total_pages} | ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_rows} ‡πÅ‡∏ñ‡∏ß")

        # ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ selection
        button_col1, button_col2, button_col3, button_col4 = st.columns([5, 4, 6, 6])
        with button_col1:
            if st.button("üîò ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤)", disabled=st.session_state.get("is_processing", False)):
                st.session_state["selected_ids"] = filtered_df[~filtered_df["already_sent"]]["Id"].tolist()
        with button_col2:
            if st.button("üîò ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", disabled=st.session_state.get("is_processing", False)):
                st.session_state["selected_ids"] = []
        with button_col3:
            if st.button("üîò ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", disabled=st.session_state.get("is_processing", False)):
                page_ids = paginated_df[~paginated_df["already_sent"]]["Id"].tolist()
                st.session_state["selected_ids"] = list(set(st.session_state["selected_ids"] + page_ids))
        with button_col3:
            st.markdown("")

        # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á checkbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        for _, row in paginated_df.iterrows():
            rec_id = row["Id"]
            preview = row["preview_message"]
            already_sent = row["already_sent"]
            default_checked = rec_id in st.session_state["selected_ids"]

            if already_sent:
                st.markdown(f"‚úÖ **{rec_id}**: {preview}")
            else:
                checked = st.checkbox(
                    f"üÜï {rec_id}: {preview}",
                    key=f"chk_{rec_id}",
                    value=default_checked
                )
                if checked and rec_id not in st.session_state["selected_ids"]:
                    st.session_state["selected_ids"].append(rec_id)
                elif not checked and rec_id in st.session_state["selected_ids"]:
                    st.session_state["selected_ids"].remove(rec_id)
        
        #‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
        selected_ids = st.session_state.get("selected_ids", [])
        st.info(f"üìã ‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {len(selected_ids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà", disabled=st.session_state.get("is_processing", False)):
        if not tmp_token or not chat_token:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ó‡∏±‡πâ‡∏á tmp_token ‡πÅ‡∏•‡∏∞ chat_token")
        elif not selected_ids:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ rec_id ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        else:
            st.session_state["is_processing"] = True

            selected_df = st.session_state["full_df"]
            selected_df = selected_df[selected_df["Id"].isin(selected_ids)]

            st.info(f"üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {len(selected_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...")

            # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á progress bar
            progress = st.progress(0, text="‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")

            try:
                # ‚ùó ‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏° (process_records ‡∏ó‡∏≥ loop ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
                processed_df = process_records(selected_df, tmp_token, chat_token, contact_id)
                st.session_state["processed"] = True
                st.session_state["processed_df"] = processed_df
                st.success("üéâ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
            except Exception as e:
                st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
                st.exception(e)

            progress.progress(1.0, text=f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {len(selected_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            st.session_state["is_processing"] = False


    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CSV ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
    if st.session_state.get("processed"):
        st.success("üéâ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        if role == "super admin":
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô CSV",     # ‡∏õ‡πâ‡∏≤‡∏¢‡∏õ‡∏∏‡πà‡∏°
                data=st.session_state["processed_df"].to_csv(index=False),    # ‡πÅ‡∏õ‡∏•‡∏á DataFrame ‡πÄ‡∏õ‡πá‡∏ô CSV
                file_name="processed_results.csv",  # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
                mime="text/csv"                     # ‡∏£‡∏∞‡∏ö‡∏∏ MIME type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV
            )

elif menu == "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°":
    st.header("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    st.markdown("""
    - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API 3CX ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    - ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ ChatCenter
    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å `recId`

    ### üîë Token ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å
    - `tmp_token` (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö API 3CX)
    - `chat_token` (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö ChatCenter)
    - `contact_id` (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Upload ‡πÅ‡∏•‡∏∞ CreateRoom)

    ### üîÅ Workflow ‡∏™‡∏£‡∏∏‡∏õ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å JSON)
    - ‡∏Å‡∏£‡∏≠‡∏Å `tmp_token`, `chat_token`, `contact_id`, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
    - ‡∏î‡∏∂‡∏á JSON ‡∏î‡πâ‡∏ß‡∏¢ curl API ‡∏à‡∏≤‡∏Å 3CX ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    - ‡πÇ‡∏´‡∏•‡∏î JSON ‚Üí DataFrame ‚Üí ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ recId ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á
    - ‡∏ß‡∏ô‡∏•‡∏π‡∏õ: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á, ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î, ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á, ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å recId ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏™‡πà `sent_records.csv`

    ### üìÅ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
    ```
    üìÅ project-root/
    ‚îú‚îÄ‚îÄ main.py                ‚Üê Streamlit app
    ‚îú‚îÄ‚îÄ utils.py               ‚Üê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å API
    ‚îú‚îÄ‚îÄ logs/
    ‚îÇ   ‚îú‚îÄ‚îÄ sent_records.csv   ‚Üê ‡πÄ‡∏Å‡πá‡∏ö recId ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    ‚îÇ   ‚îî‚îÄ‚îÄ errors.csv         ‚Üê ‡πÄ‡∏Å‡πá‡∏ö recId ‡∏ó‡∏µ‡πà error (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    ‚îú‚îÄ‚îÄ tmp/
    ‚îÇ   ‚îî‚îÄ‚îÄ *.wav              ‚Üê ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    ```
    """)

elif menu == "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô":
    st.header("üìò ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á 3CX")

    st.subheader("‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.markdown("""
    1Ô∏è‚É£ **‡∏Å‡∏£‡∏≠‡∏Å Token ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**  
    2Ô∏è‚É£ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° üì• **‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏à‡∏≤‡∏Å 3CX**  
    3Ô∏è‚É£ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•:  
    > ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: `185` ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ | ‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß: `184` | ‡∏£‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: `1`

    4Ô∏è‚É£ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ "‡∏£‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•" ‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° üöÄ **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà**  
    5Ô∏è‚É£ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà ChatCenter ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥  
    6Ô∏è‚É£ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô CSV ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    """)

    st.subheader("üõ† ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤: Invalid JSON returned! Status: 401")
    st.markdown("""
    ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° **Exception: Invalid JSON returned! Status: 401** ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á  
    ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

    1. ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö [3CX Dashboard](https://villamarket.3cx.co/#/office/dashboard) ‡πÅ‡∏•‡∏∞ Login  
    2. ‡∏Å‡∏î `F12` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î Developer Tools ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ó‡πá‡∏ö **Network**  
    3. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π **Recordings** [‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà](https://villamarket.3cx.co/#/office/recordings)  
    4. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠ (Request) ‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Network > ‡πÑ‡∏õ‡∏ó‡∏µ‡πà **Headers**  
    5. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ `authorization: Bearer` ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ **token ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ `ey...`**  
    6. ‡∏ô‡∏≥ token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á `tmp_token` ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    """)

    st.info("üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: Token ‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á Error ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô")


# Footer ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î
st.markdown("""
    <hr style='margin-top: 3rem;'>
    <div style='text-align: center; color: gray;'>
        Provide ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏ß‡∏¥‡∏•‡∏•‡πà‡∏≤ ‡∏°‡∏≤‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ï‡πÄ‡∏à‡∏û‡∏µ ‡πÇ‡∏î‡∏¢‡∏¢‡∏π‡∏ô‡∏¥‡∏Ñ‡∏≠‡∏£‡πå‡∏ô ‡πÄ‡∏ó‡∏Ñ ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏¥‡πÄ‡∏Å‡∏£‡∏ä‡∏±‡πà‡∏ô
    </div>
""", unsafe_allow_html=True)