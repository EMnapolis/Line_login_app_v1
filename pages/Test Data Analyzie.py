import streamlit as st
import pandas as pd
import plotly.express as px
from io import BytesIO
import plotly.io as pio
from openai import OpenAI
from config import OPENAI_API_KEY

client = OpenAI(api_key=OPENAI_API_KEY)
st.set_page_config(page_title="üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô", layout="wide")
st.title("üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° + ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (Grouped Chart)")


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏•‡∏∏‡πà‡∏°
def plot_grouped_chart(df, group_col, category_col, chart_type="bar"):
    grouped_df = (
        df[[group_col, category_col]]
        .dropna()
        .groupby([group_col, category_col])
        .size()
        .reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")
    )

    if chart_type == "bar":
        fig = px.bar(
            grouped_df,
            x=group_col,
            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
            color=category_col,
            barmode="group",
            text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
            title=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô '{category_col}' ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ '{group_col}'",
        )
    elif chart_type == "line":
        fig = px.line(
            grouped_df,
            x=group_col,
            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
            color=category_col,
            markers=True,
            title=f"‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° '{category_col}' ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ '{group_col}'",
        )
    elif chart_type == "area":
        fig = px.area(
            grouped_df,
            x=group_col,
            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
            color=category_col,
            title=f"‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á '{category_col}' ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ '{group_col}'",
        )
    elif chart_type == "pie":
        fig = px.pie(
            grouped_df,
            names=category_col,
            values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
            title=f"‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô '{category_col}' ‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å '{group_col}'",
        )
    elif chart_type == "heatmap":
        heat_df = grouped_df.pivot(
            index=group_col, columns=category_col, values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
        ).fillna(0)
        fig = px.imshow(
            heat_df,
            labels=dict(x=category_col, y=group_col, color="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"),
            title=f"Heatmap: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏Ç‡∏≠‡∏á '{category_col}' ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ '{group_col}'",
        )
    elif chart_type == "treemap":
        fig = px.treemap(
            grouped_df,
            path=[group_col, category_col],
            values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
            title=f"Treemap ‡∏Ç‡∏≠‡∏á '{group_col}' ‡πÅ‡∏•‡∏∞ '{category_col}' ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
        )
    else:
        st.error("‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö")
        return grouped_df

    fig.update_layout(height=500)

    st.subheader("üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")
    st.plotly_chart(fig, use_container_width=True)

    # üîò ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏≤‡∏ü (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô heatmap/treemap ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà render ‡∏ö‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)
    if chart_type not in ["pie", "heatmap", "treemap"]:
        img_bytes = BytesIO()
        pio.write_image(fig, img_bytes, format="png", width=1000, height=600, scale=2)
        img_bytes.seek(0)
        st.download_button(
            label="üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡πá‡∏ô PNG",
            data=img_bytes,
            file_name="grouped_chart.png",
            mime="image/png",
        )

    return grouped_df


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ GPT
def analyze_with_gpt(grouped_df, group_col, category_col):
    prompt = f"""‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {category_col} ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ {group_col}:
{grouped_df.to_string(index=False)}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏£‡∏∏‡∏õ:
- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏´‡∏ô‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏∑‡πà‡∏ô
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏î‡∏ñ‡∏π‡∏Å‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
- ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
- ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""

    with st.spinner("ü§ñ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
        response = client.chat.completions.create(
            model="gpt-4", messages=[{"role": "user", "content": prompt}]
        )
        ai_result = response.choices[0].message.content.strip()

    st.markdown("### ü§ñ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢ AI")
    st.markdown(ai_result)


# ===== ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå =====
uploaded_files = st.file_uploader(
    "üìÇ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (.csv ‡∏´‡∏£‡∏∑‡∏≠ .xlsx)", type=["csv", "xlsx"], accept_multiple_files=True
)

if uploaded_files:
    all_dfs = []
    for uploaded_file in uploaded_files:
        try:
            if uploaded_file.name.endswith(".csv"):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file)
            df["üìÅ_‡πÅ‡∏´‡∏•‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå"] = uploaded_file.name
            all_dfs.append(df)
        except Exception as e:
            st.error(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    if all_dfs:
        df = pd.concat(all_dfs, ignore_index=True)
        st.subheader("üßæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        st.dataframe(df)

        text_cols = df.select_dtypes(include="object").columns.tolist()
        if len(text_cols) < 2:
            st.error("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        else:
            group_col = st.selectbox("üìã ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° (Group)", text_cols)
            category_col = st.selectbox("üè∑Ô∏è ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", text_cols, index=1)
            chart_type = st.selectbox(
                "üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
                ["bar", "line", "area", "pie", "heatmap", "treemap"],
                index=0,
                format_func=lambda x: {
                    "bar": "‡πÅ‡∏ó‡πà‡∏á (Bar)",
                    "line": "‡πÄ‡∏™‡πâ‡∏ô (Line)",
                    "area": "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (Area)",
                    "pie": "‡∏ß‡∏á‡∏Å‡∏•‡∏° (Pie)",
                    "heatmap": "‡∏Æ‡∏µ‡∏ó‡πÅ‡∏°‡∏û (Heatmap)",
                    "treemap": "‡∏ó‡∏£‡∏µ‡πÅ‡∏°‡∏û (Treemap)",
                }[x],
            )

            if group_col and category_col:
                grouped_df = plot_grouped_chart(df, group_col, category_col, chart_type)

                if st.button("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ AI") and grouped_df is not None:
                    analyze_with_gpt(grouped_df, group_col, category_col)
